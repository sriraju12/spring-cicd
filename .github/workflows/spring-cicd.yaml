name: Spring CICD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'springboot-manifests/deployment.yaml'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.jar      


  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn test

  
  code_analysis:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

         
  build_docker_image_and_push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/github-spring-cicd:${{ github.sha }}
          file: ./Dockerfile

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'


  update_k8s_manifests:
    runs-on: ubuntu-latest
    needs: build_docker_image_and_push
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update k8s deployment manifest
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
        run: |

          NEW_IMAGE="$DOCKERHUB_USERNAME/github-spring-cicd:$IMAGE_TAG"

          sed -i "s|image: ${DOCKERHUB_USERNAME}/.*|image: ${NEW_IMAGE}|g" srpingboot-manifests/deployment.yaml

          echo "Updated deployment.yaml with new image: $NEW_IMAGE"

      - name: Commit and push changes    
        run: |
          git add srpingboot-manifests/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ github.sha }} [skip ci]" || echo "No changes to commit"
          git push
        
      
  

         

      
        
